package backend.academy.visualization;

import backend.academy.cell.Cell;
import backend.academy.cell.Passage;
import backend.academy.models.Coordinate;
import backend.academy.models.Maze;
import java.util.List;

public class ConsoleRenderer implements Renderer {
    // –°–∏–º–≤–æ–ª—ã –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
    private static final String WALL = "‚¨úÔ∏è";
    private static final String SPACE = "‚¨õÔ∏è";
    private static final String START = "üü©";
    private static final String END = "üü•";
    private static final String PATH = "üü®";
    private static final String COIN = "ü™ô";
    private static final String SAND = "üèñÔ∏è";
    private static final String UNEXPECTED_VALUE_MESSAGE = "Unexpected value: ";

    /**
     * –†–µ–Ω–¥–µ—Ä–∏—Ç –ª–∞–±–∏—Ä–∏–Ω—Ç –±–µ–∑ –ø—É—Ç–∏.
     *
     * @param maze –ª–∞–±–∏—Ä–∏–Ω—Ç –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
     * @return —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
     */
    @Override
    public String render(Maze maze) {
        return render(maze, List.of());
    }

    /**
     * –†–µ–Ω–¥–µ—Ä–∏—Ç –ª–∞–±–∏—Ä–∏–Ω—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø—É—Ç—ë–º.
     *
     * @param maze –ª–∞–±–∏—Ä–∏–Ω—Ç –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
     * @param path –ø—É—Ç—å, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å
     * @return —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ —Å –ø—É—Ç—ë–º
     */
    @Override
    public String render(Maze maze, List<Coordinate> path) {
        int height = maze.height();
        int width = maze.width();

        Cell[][] mazeList = maze.mazeListModel().mazeList();
        StringBuilder sb = new StringBuilder();

        // –í–µ—Ä—Ö–Ω—è—è —Ä–∞–º–∫–∞
        sb.append(WALL.repeat(width + 2)).append('\n');

        for (int row = 0; row < height; row++) {
            sb.append(WALL); // –õ–µ–≤–∞—è —Ä–∞–º–∫–∞
            for (int col = 0; col < width; col++) {
                Cell cell = mazeList[row][col];
                Coordinate coordinate = new Coordinate(row, col);
                if (path.contains(coordinate)) {
                    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é, –∫–æ–Ω–µ—á–Ω—É—é –∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏ –ø—É—Ç–∏
                    if (coordinate.equals(path.getFirst())) {
                        sb.append(START);
                        continue;
                    } else if (coordinate.equals(path.getLast())) {
                        sb.append(END);
                        continue;
                    } else {
                        sb.append(PATH);
                        continue;
                    }
                }
                // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∏–ø —è—á–µ–π–∫–∏
                switch (cell.type()) {
                    case WALL:
                        sb.append(WALL);
                        break;
                    case PASSAGE:
                        Passage passage = (Passage) cell;
                        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–æ—Ö–æ–¥—ã
                        switch (passage.passageType()) {
                            case SAND:
                                sb.append(SAND);
                                break;
                            case COIN:
                                sb.append(COIN);
                                break;
                            case NORMAL:
                                sb.append(SPACE);
                                break;
                            default:
                                throw new IllegalStateException(UNEXPECTED_VALUE_MESSAGE + passage.passageType());
                        }
                        break;
                    default:
                        throw new IllegalStateException(UNEXPECTED_VALUE_MESSAGE + cell.type());
                }

            }
            sb.append(WALL); // –ü—Ä–∞–≤–∞—è —Ä–∞–º–∫–∞
            sb.append('\n');
        }
        // –ù–∏–∂–Ω—è—è —Ä–∞–º–∫–∞
        sb.append(WALL.repeat(width + 2)).append('\n');
        return sb.toString();
    }
}
